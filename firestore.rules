rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    //============================================================
    //           ---=== Helper Functions ===---
    // This section contains reusable functions for checking permissions.
    //============================================================

    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      // An authenticated user can check their own admin status.
      return isAuthenticated() && get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.isAdmin == true;
    }

    function isOwner(resource) {
      // The user is the owner of the document (e.g., a classroom or courseware).
      return isAuthenticated() && request.auth.uid == resource.data.ownerId;
    }
    
    function isSelf(userId) {
      // The user is accessing their own user document.
      return isAuthenticated() && request.auth.uid == userId;
    }


    //============================================================
    //         ---=== Rules per Collection ===---
    // This section applies the helper functions to specific data paths.
    //============================================================

    match /classrooms/{classroomId} {
      // Anyone needs to be able to read classroom data to join and see the student list.
      allow read: if true;
      
      // Creating a classroom requires the ownerId to be the user's UID.
      allow create: if isAuthenticated() && request.resource.data.ownerId == request.auth.uid;
      
      // Updating/deleting a classroom requires being the owner or an admin.
      allow update, delete: if isOwner(resource) || isAdmin();

      match /submissions/{submissionId} {
        // Any student (even not authenticated via Firebase) can submit an answer.
        // This is open, relying on app logic to control submissions.
        allow create: if true;

        // Teachers (owners) and admins can read all submissions.
        allow read: if isOwner(get(/databases/$(database)/documents/classrooms/$(classroomId)).data) || isAdmin();
        
        // Only admins or owners can delete submission history.
        allow delete: if isOwner(get(/databases/$(database)/documents/classrooms/$(classroomId)).data) || isAdmin();
        
        // Submissions are immutable.
        allow update: if false;
      }

      match /presence/{studentId} {
        // Anyone can read presence data to see who is online.
        allow read: if true;

        // Any student can update their own presence status.
        allow write: if true; // Open for simplicity, as students are not Firebase users.
      }
    }

    match /courseware/{coursewareId} {
      allow read: if isOwner(resource) || isAdmin();
      allow create: if isAuthenticated() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isOwner(resource) || isAdmin();
    }
    
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isSelf(userId);
      // Allow a user to update their own `lastActivity` or other profile info.
      allow update: if isSelf(userId);
      allow delete: if isAdmin();
    }
    
    match /admins/{adminId} {
      // An authenticated user can check their own admin document.
      allow get: if isAuthenticated();
      // Only admins can list all other admins.
      allow list: if isAdmin();
      // Only admins can create, update, or delete admin records.
      allow write: if isAdmin();
    }

    match /aiUsageLogs/{logId} {
      // Only authenticated users (teachers) can create logs.
      allow create: if isAuthenticated();
      // Only admins can read usage logs.
      allow read: if isAdmin();
      // Logs are immutable.
      allow update, delete: if false;
    }
  }
}
