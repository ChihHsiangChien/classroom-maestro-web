rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    // These functions make the rules easier to read and maintain.

    // Is the user signed in at all (including anonymously)?
    function isAuthenticated() {
      return request.auth != null;
    }

    // Is the user an anonymous student?
    function isAnonymous() {
      return isAuthenticated() && request.auth.token.firebase.sign_in_provider == 'anonymous';
    }

    // Does the user's UID exist in the `admins` collection?
    function isAdmin() {
      return isAuthenticated() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // For creating new documents: Is the user creating a document for themselves?
    function isNewOwner() {
      return isAuthenticated() && request.auth.uid == request.resource.data.ownerId;
    }

    // For updating/deleting existing documents: Does the user own this specific document?
    function isExistingOwner(resource) {
      return isAuthenticated() && request.auth.uid == resource.data.ownerId;
    }

    // --- Rules ---

    // Admins collection can only be read by other admins.
    match /admins/{adminId} {
      allow read: if isAdmin();
    }
    
    // Users can update their own document (e.g., lastActivity timestamp). Admins can read anyone's.
    match /users/{userId} {
      allow read: if isAdmin() || request.auth.uid == userId;
      allow write: if request.auth.uid == userId;
    }
    
    // AI usage logs can be created by any authenticated user, but only read by admins.
    match /aiUsageLogs/{logId} {
        allow read: if isAdmin();
        allow create: if isAuthenticated();
    }
    
    // Classrooms have detailed rules for different operations.
    match /classrooms/{classroomId} {
      // Allow anyone (including anonymous students) to read a *single* classroom document.
      // This is necessary for the join page to function.
      allow get: if true;
      
      // Allow listing classrooms *only if* the user is an admin OR they are querying for their own classrooms.
      // The frontend query MUST include `where("ownerId", "==", request.auth.uid)` for this to work for non-admins.
      allow list: if isAdmin() || (isAuthenticated() && request.query.where.ownerId == request.auth.uid);

      allow create: if isNewOwner();
      allow update: if isExistingOwner(resource) || isAdmin();
      allow delete: if isExistingOwner(resource) || isAdmin();

      // Submissions can be read by anyone, but only created by authenticated users.
      match /submissions/{submissionId} {
        allow read: if true;
        // Allow creation if the request includes all required fields for security.
        allow create: if isAuthenticated() && request.resource.data.keys().hasAll(['studentId', 'studentName', 'questionId', 'questionText', 'questionType', 'answer', 'timestamp']);
      }
      
      // Presence data can be freely read/written by students to update their online status.
      match /presence/{studentId} {
        allow read, write: if true;
      }
    }

    // Courseware rules are similar to classrooms.
    match /courseware/{coursewareId} {
      allow get: if isExistingOwner(resource) || isAdmin();
      allow list: if isAdmin() || (isAuthenticated() && request.query.where.ownerId == request.auth.uid);
      allow create: if isNewOwner();
      allow update, delete: if isExistingOwner(resource) || isAdmin();
    }
  }
}
