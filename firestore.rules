
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================
    // These functions centralize common logic for reuse in the rules below.

    // Is the user signed in?
    function isAuthenticated() {
      return request.auth != null;
    }

    // Is the user an administrator?
    // This is used with the /admins/{userId} rule to allow 'get' for anyone,
    // which prevents permission loops when checking for admin status.
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Does the incoming data's ownerId match the user's UID? (for create operations)
    function isNewOwner() {
      return request.auth.uid == request.resource.data.ownerId;
    }

    // Does the existing data's ownerId match the user's UID? (for update/delete operations)
    function isExistingOwner(resource) {
      return request.auth.uid == resource.data.ownerId;
    }

    // =================================
    // Rules for Collections
    // =================================

    // Admins: Only admins can see who other admins are.
    // Anyone authenticated can check their own admin status.
    match /admins/{userId} {
      allow get: if isAuthenticated();
      allow list, write: if isAdmin();
    }

    // Users: Users can update their own document (e.g., lastActivity). Admins can read any user doc.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId || isAdmin();
      allow create: if request.auth.uid == userId;
      allow delete: if false; // Users should not be able to delete their own user records
    }

    // Classrooms: Publicly readable for students to join.
    // Only owners or admins can modify.
    match /classrooms/{classroomId} {
      allow read: if true; // CRITICAL: Anyone must be able to read classroom info to join
      allow create: if isAuthenticated() && isNewOwner();
      allow update: if isAuthenticated() && (isExistingOwner(resource) || isAdmin());
      allow delete: if isAuthenticated() && (isExistingOwner(resource) || isAdmin());

      // Presence: Students (authenticated users) can update their own online status.
      // Teacher/Admin can read all presence data.
      match /presence/{studentId} {
        allow read, write: if isAuthenticated();
      }

      // Submissions: Students (authenticated users) can create submissions.
      // Teacher/Admin can read them. No one can update/delete to preserve data integrity.
      match /submissions/{submissionId} {
        allow read, create: if isAuthenticated();
        allow update, delete: if false;
      }
    }

    // Courseware: Only owners or admins can manage their courseware.
    match /courseware/{coursewareId} {
      allow create: if isAuthenticated() && isNewOwner();
      allow read, update, delete: if isAuthenticated() && (isExistingOwner(resource) || isAdmin());
    }
    
    // AI Usage Logs: Teachers can create logs for themselves. Admins can read all.
    match /aiUsageLogs/{logId} {
        allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
        allow read: if isAdmin();
        allow update, delete: if false;
    }
  }
}
