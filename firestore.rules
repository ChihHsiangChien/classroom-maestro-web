rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isOwner(ownerId) {
      return request.auth != null && request.auth.uid == ownerId;
    }

    function isAdmin() {
      // This check performs a 'get' on the /admins/{uid} path.
      // The rule for that path must allow this operation.
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Classroom Rules
    match /classrooms/{classroomId} {
      allow read: if true; // Publicly readable for students to join
      allow create: if isOwner(request.resource.data.ownerId);
      allow update, delete: if isOwner(resource.data.ownerId);
      
      // Subcollections
      match /submissions/{submissionId} {
        allow read: if isOwner(get(/databases/$(database)/documents/classrooms/$(classroomId)).data.ownerId);
        allow create: if request.auth == null; // Allow students (unauthenticated) to submit
      }
      
      match /presence/{studentId} {
         allow read, write: if true; // Open for students and teacher to update presence
      }
    }
    
    // User Rules
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isAdmin();
      allow create, update: if isOwner(userId);
    }
    
    // Admin Rules
    match /admins/{adminId} {
      // Allow any authenticated user to check if they are an admin.
      // This is required for the isAdmin() function to work correctly.
      // We use 'get' because isAdmin() only ever performs a document lookup, not a list.
      allow get: if request.auth.uid == adminId;
    }

    // Courseware Rules
    match /courseware/{coursewareId} {
       // Allow a user to read if they are the owner OR if they are an admin.
       // This rule works for both 'get' and 'list' operations.
       // For a non-admin 'list', the client query MUST include `where('ownerId', '==', request.auth.uid)`.
       allow read: if isOwner(resource.data.ownerId) || isAdmin();
       
       allow create: if isOwner(request.resource.data.ownerId);
       allow update, delete: if isOwner(resource.data.ownerId);
    }
  }
}
