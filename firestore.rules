
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAnonymous() {
      return request.auth.token.firebase.sign_in_provider == 'anonymous';
    }

    function isTeacher() {
      return isAuthenticated() && !isAnonymous();
    }
    
    function isAdmin() {
      return isTeacher() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    function isOwner(resource) {
      return request.auth.uid == resource.data.ownerId;
    }
    
    // --- Collection Rules ---

    // Admins: Only other admins can manage the admin list.
    // Any user can check their own admin status for UI purposes.
    match /admins/{adminId} {
      allow get: if isAuthenticated() && (request.auth.uid == adminId || isAdmin());
      allow list, write: if isAdmin();
    }
    
    // Users: Users can only manage their own document. Admins can list for the panel.
    match /users/{userId} {
      allow get, update, create: if request.auth.uid == userId;
      allow list: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // AI Usage Logs: Teachers can create logs, but only admins can read them.
    match /aiUsageLogs/{logId} {
        allow read: if isAdmin();
        allow create: if isTeacher();
        allow update, delete: if false; // Logs are immutable
    }

    // Classrooms: Core resource with complex rules.
    match /classrooms/{classroomId} {
      // READ:
      // - A student needs to 'get' a single classroom to see the student list on the join page.
      // - A teacher needs to 'list' the classrooms they own for their dashboard.
      // - An admin can 'get' or 'list' any classroom.
      allow get: if isAuthenticated() || isAdmin();
      allow list: if (isTeacher() && request.query.ownerId == request.auth.uid) || isAdmin();
      
      // WRITE:
      // - Teachers can create classrooms for themselves.
      allow create: if isTeacher() && request.resource.data.ownerId == request.auth.uid;
      
      // - Owners/Admins can delete.
      allow delete: if isOwner(resource) || isAdmin();
      
      // - UPDATE: This is the most complex rule.
      allow update: if 
        // Condition 1: The user is the owner or an admin (full update permissions).
        (isOwner(resource) || isAdmin()) ||
        // Condition 2: A narrow exception for the "Race" feature.
        (
          // a) User must be logged in (student or teacher).
          isAuthenticated() &&
          // b) The race must be currently pending.
          resource.data.race.status == 'pending' &&
          // c) The user must be claiming the win for themselves.
          request.resource.data.race.winnerId == request.auth.uid &&
          // d) This update is ONLY allowed to change the 'race' field and nothing else.
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['race'])
        );
      
      // --- Subcollections ---
      
      // Submissions: Any authenticated user (student or teacher) can create.
      // Read is also open for dashboard/results display. No updates/deletes from client.
      match /submissions/{submissionId} {
        allow read, create: if isAuthenticated();
        allow update, delete: if false;
      }
      
      // Presence: Any authenticated user can write their own presence status.
      // This allows students to mark themselves online/offline.
      match /presence/{studentId} {
        allow read, write: if isAuthenticated();
      }
    }
    
    // Courseware: Rules mirror classrooms for teacher-owned resources.
    match /courseware/{coursewareId} {
      allow get: if isOwner(resource) || isAdmin();
      allow list: if (isTeacher() && request.query.ownerId == request.auth.uid) || isAdmin();
      allow create: if isTeacher() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isOwner(resource) || isAdmin();
    }
  }
}
