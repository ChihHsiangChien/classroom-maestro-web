rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }
    function isAnonymous() {
      return isAuthenticated() && request.auth.token.firebase.sign_in_provider == 'anonymous';
    }
    function isTeacher() {
      return isAuthenticated() && !isAnonymous();
    }
    function isAdmin() {
      // Check for existence of the user's UID in the admins collection.
      // This is not a billable read operation in security rules.
      return isTeacher() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    function isOwner(resource) {
      return request.auth.uid == resource.data.ownerId;
    }

    // Admins: Only other admins can manage the list.
    // A user can check their own admin status, which is crucial for login flow.
    match /admins/{adminId} {
      allow get: if request.auth.uid == adminId || isAdmin();
      allow list, create, update, delete: if isAdmin();
    }

    // Users: Users can only manage their own documents. Admins can list all for the admin panel.
    match /users/{userId} {
      allow get, update, create: if request.auth.uid == userId;
      allow list: if isAdmin();
    }

    // AI Usage Logs: Only admins can view logs. Teachers can create them.
    match /aiUsageLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isTeacher();
    }

    // Classrooms: The core collection with complex rules.
    match /classrooms/{classroomId} {
      // GET: Owner, admin, or any anonymous student can get a single classroom doc.
      // This is crucial for the "Join Class" page to work for students.
      allow get: if isOwner(resource) || isAdmin() || isAnonymous();

      // LIST: Admins can list all. Teachers can ONLY list classrooms they own.
      // The frontend query MUST match this rule (where('ownerId', '==', uid)).
      allow list: if (isTeacher() && request.query.where.get('ownerId', '') == request.auth.uid) || isAdmin();
      
      // CREATE: Only teachers can create, and must set themselves as owner.
      allow create: if isTeacher() && request.resource.data.ownerId == request.auth.uid;
      
      // UPDATE: Owner or admin can update freely.
      // EXCEPTION for "Race" feature: Any authenticated user (student) can update ONLY the 'race' field
      // if and only if the race is 'pending' and they are claiming victory for themselves.
      allow update: if isOwner(resource) || isAdmin() || (
        isAuthenticated() &&
        resource.data.race.status == 'pending' &&
        request.resource.data.race.winnerId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['race'])
      );
      
      // DELETE: Only the owner or an admin can delete.
      allow delete: if isOwner(resource) || isAdmin();

      // Submissions: Students can create, but no one can modify them from the client.
      match /submissions/{submissionId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update, delete: if false;
      }
      
      // Presence: Any authenticated user can update their presence status.
      match /presence/{studentId} {
        allow read, write: if isAuthenticated();
      }
    }
    
    // Courseware: Teacher-owned resources, mirroring classroom permissions.
    match /courseware/{coursewareId} {
        allow get: if isOwner(resource) || isAdmin();
        allow list: if (isTeacher() && request.query.where.get('ownerId', '') == request.auth.uid) || isAdmin();
        allow create: if isTeacher() && request.resource.data.ownerId == request.auth.uid;
        allow update, delete: if isOwner(resource) || isAdmin();
    }
  }
}
