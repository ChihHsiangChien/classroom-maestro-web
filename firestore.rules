rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isNewOwner(userId) {
      return isAuthenticated() && isOwner(userId);
    }
    
    function isExistingOwner(resource) {
        return isAuthenticated() && isOwner(resource.data.ownerId);
    }

    function isAdmin() {
      return isAuthenticated() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Admins Collection: Only other admins can read. No one can write directly.
    match /admins/{userId} {
      allow read: if isAdmin();
      allow write: if false; // Should be managed directly in Firebase console
    }

    // Users Collection: Users can update their own document.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) || isAdmin();
    }

    // AI Usage Logs: Authenticated users can create logs, but only admins can read them.
    match /aiUsageLogs/{logId} {
      allow read, list: if isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if false; // Logs are immutable
    }

    // Classrooms Collection
    match /classrooms/{classroomId} {
      // Allow anyone authenticated (including anonymous students) to GET a single classroom document.
      // This is necessary for the join page to function.
      allow get: if isAuthenticated();
      
      // Allow LIST operations only for admins OR for teachers querying their own documents.
      allow list: if isAdmin() || (isAuthenticated() && request.query.where.ownerId == request.auth.uid);
      
      // Allow CREATE only for authenticated users who are the owner of the new document.
      allow create: if isNewOwner(request.resource.data.ownerId);
      
      // Allow UPDATE/DELETE only for the existing owner or an admin.
      allow update, delete: if isExistingOwner(resource.data) || isAdmin();

      // Submissions Sub-collection
      match /submissions/{submissionId} {
        // Allow any authenticated user to create a submission.
        allow create: if isAuthenticated();
        
        // Allow any authenticated user to read submissions (needed for student result view).
        allow read: if isAuthenticated();
        
        // Disallow updates and deletes from clients.
        allow update, delete: if false; 
      }
      
      // Presence Sub-collection
      match /presence/{studentId} {
          // Allow any authenticated user (students are anonymous users) to set their own presence.
          allow write: if isAuthenticated();
          
          // Allow any authenticated user to read presence data.
          allow read: if isAuthenticated();
      }
    }
    
    // Courseware Collection
    match /courseware/{coursewareId} {
        // Similar to classrooms, allow GET for any authenticated user if needed, but LIST is restricted.
        allow get: if isAuthenticated();
        
        // Teachers can only list their own courseware. Admins can list all.
        allow list: if isAdmin() || (isAuthenticated() && request.query.where.ownerId == request.auth.uid);
        
        // CREATE, UPDATE, DELETE rules are the same as classrooms.
        allow create: if isNewOwner(request.resource.data.ownerId);
        allow update, delete: if isExistingOwner(resource.data) || isAdmin();
    }
  }
}
