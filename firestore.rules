
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/admins/$(userId));
    }
    
    match /users/{userId} {
      allow read: if true;
      allow write: if isOwner(userId);
    }

    match /admins/{userId} {
      allow read: if isOwner(userId);
      // For simplicity, admin creation is handled manually in the Firebase Console.
      allow write: if false; 
    }

    match /classrooms/{classroomId} {
      allow read: if true;

      // Teachers can create and delete their own classrooms. Admins can delete any.
      allow create: if isOwner(request.resource.data.ownerId);
      allow delete: if isOwner(resource.data.ownerId) || isAdmin(request.auth.uid);

      // This is a special rule to allow the server-side claimRaceAction to work.
      // It's a highly restricted update.
      allow update: if (isOwner(resource.data.ownerId) || isAdmin(request.auth.uid))
                    || 
                    (
                      request.auth == null && // Must be unauthenticated (from a server action)
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['race']) && // Only 'race' can be changed
                      request.resource.data.race.diff(resource.data.race).affectedKeys().hasOnly(['status', 'winnerId', 'winnerName']) && // Only specific race fields
                      resource.data.race.status == 'pending' && // Old status must be 'pending'
                      request.resource.data.race.status == 'finished' // New status must be 'finished'
                    );

      // Subcollections
      match /submissions/{submissionId} {
        allow read: if isOwner(get(/databases/$(database)/documents/classrooms/$(classroomId)).data.ownerId) || isAdmin(request.auth.uid);
        allow create: if true; // Students can always create submissions
        allow update, delete: if false; // Submissions are immutable
      }
      
      match /presence/{studentId} {
          allow read, write: if true; // Open for students and teachers to update presence
      }
    }
    
    match /courseware/{coursewareId} {
      allow read, create: if request.auth.uid != null;
      allow update, delete: if isOwner(resource.data.ownerId) || isAdmin(request.auth.uid);
    }
    
    match /aiUsageLogs/{logId} {
      allow read: if isAdmin(request.auth.uid);
      allow create: if request.auth.uid != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if false;
    }
  }
}
