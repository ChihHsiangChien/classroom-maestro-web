rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    // These functions make the rules below easier to read and maintain.

    // Checks if a user is signed in (including anonymous users).
    function isAuthenticated() {
      return request.auth != null;
    }

    // Checks if the currently authenticated user is the owner of a document.
    // Used for existing documents during 'update' or 'delete'.
    function isOwner(resource) {
      return request.auth.uid == resource.data.ownerId;
    }

    // Checks if the user performing the request is an administrator.
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // --- Collection Rules ---

    // Rules for the 'classrooms' collection
    match /classrooms/{classroomId} {
      // READ PERMISSIONS:
      // 'get': Allow any authenticated user (including anonymous students) to read a single classroom.
      // This is essential for the student "Join Classroom" page to function.
      allow get: if isAuthenticated();
      
      // 'list': Allow authenticated teachers to list the classrooms they own.
      // An admin can list all classrooms.
      // This rule works because the frontend query includes `where("ownerId", "==", user.uid)`,
      // and Firestore verifies that each document returned also passes the `get` rule.
      allow list: if isAuthenticated();

      // WRITE PERMISSIONS:
      // 'create': Allow an authenticated user to create a classroom if they set themselves as the owner.
      allow create: if (isAuthenticated() && (request.resource.data.ownerId == request.auth.uid || isAdmin()));
      // 'update', 'delete': Only the owner or an admin can modify or delete a classroom.
      allow update, delete: if isOwner(resource) || isAdmin();

      // Sub-collection rules for a classroom
      match /submissions/{submissionId} {
        allow read: if isAuthenticated();
        // Allow any authenticated user to create a submission, but validate the required fields for security.
        allow create: if isAuthenticated() && request.resource.data.keys().hasAll(['studentId', 'studentName', 'questionId', 'answer', 'timestamp']);
      }

      match /presence/{studentId} {
        // Presence data (online status, last seen) can be read and written by any authenticated user.
        allow read, write: if isAuthenticated();
      }
    }

    // Rules for the 'courseware' collection
    match /courseware/{coursewareId} {
      // READ PERMISSIONS:
      // 'get': Only the owner or an admin can get a specific courseware document.
      allow get: if isOwner(resource) || isAdmin();
      
      // 'list': Any authenticated user can *attempt* to list courseware.
      // This will only succeed if their query (e.g., `where("ownerId", "==", uid)`)
      // exclusively requests documents that they are allowed to 'get'.
      allow list: if isAuthenticated();

      // WRITE PERMISSIONS:
      // 'create': Allow creation only if the user is the owner.
      allow create: if (isAuthenticated() && (request.resource.data.ownerId == request.auth.uid || isAdmin()));
      // 'update', 'delete': Only the owner or an admin can modify/delete.
      allow update, delete: if isOwner(resource) || isAdmin();
    }
    
    // Rules for the 'users' collection (stores teacher info)
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isAdmin();
      allow write: if request.auth.uid == userId; // For updating their own 'lastActivity'
    }
    
    // Rules for the 'admins' collection
    match /admins/{adminId} {
       // Only other admins can see the admin list.
       allow read: if isAdmin();
       // No one can write to this collection via the client. Must be managed from the Firebase Console.
       allow write: if false;
    }
    
    // Rules for the 'aiUsageLogs' collection
    match /aiUsageLogs/{logId} {
       // Any authenticated user can create a log entry.
       allow create: if isAuthenticated();
       // Only admins can read the logs.
       allow read, list: if isAdmin();
       // Logs are immutable from the client.
       allow update, delete: if false;
    }
  }
}
