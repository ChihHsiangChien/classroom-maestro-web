rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isOwner() {
      return request.auth.uid == resource.data.ownerId;
    }

    function isOwnerCreate() {
      return request.auth.uid == request.resource.data.ownerId;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    function isRaceClaim() {
      // Allow unauthenticated users (students) to claim a race win under specific conditions
      return request.auth == null &&
             // The document must have a pending race before the update
             resource.data.race.status == 'pending' &&
             // The update must change the race status to finished
             request.resource.data.race.status == 'finished' &&
             // The update must provide a winner
             request.resource.data.race.winnerId != null &&
             // Check that ONLY the required race fields are being modified.
             // This prevents a student from changing other classroom data.
             request.writeFields.hasAll(['race.status', 'race.winnerId', 'race.winnerName']) &&
             request.writeFields.size() == 3;
    }

    // Rules for 'users' collection
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isAdmin();
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      allow delete: if isAdmin();
    }
    
    match /users/{path=**} {
        allow list: if isAdmin();
    }

    // Rules for 'admins' collection
    match /admins/{userId} {
      allow read: if request.auth != null;
    }

    // Rules for 'classrooms' collection and its subcollections
    match /classrooms/{classroomId} {
      // GET: Anyone can get a single classroom doc to join.
      allow get: if true;
      // LIST: Only the owner or an admin can list classrooms.
      allow list: if request.auth != null && (isOwner() || isAdmin());
      // CREATE: Only authenticated users can create classrooms for themselves.
      allow create: if request.auth != null && isOwnerCreate();
      // UPDATE: Owner, admin, or a student claiming a race win can update.
      allow update: if (request.auth != null && (isOwner() || isAdmin())) || isRaceClaim();
      // DELETE: Only the owner or an admin can delete.
      allow delete: if request.auth != null && (isOwner() || isAdmin());

      // Rules for 'submissions' subcollection
      match /submissions/{submissionId} {
        // Anyone can create a submission (students are not authenticated).
        allow create: if true;
        // Only the classroom owner or an admin can read/list/delete submissions.
        allow read, list, delete: if request.auth != null && (isOwner() || isAdmin());
        // Nobody can update a submission once it's made.
        allow update: if false;
      }
      
      // Rules for 'presence' subcollection
      match /presence/{studentId} {
        // Anyone can read/write their presence status.
        allow read, write: if true;
      }
    }
  }
}
