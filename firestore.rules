rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    //======================================================================
    //  Helper Functions
    //  This section contains reusable functions for checking permissions.
    //======================================================================

    function isAuthenticated() {
      return request.auth != null;
    }

    function isAnonymous() {
      return isAuthenticated() && request.auth.token.firebase.sign_in_provider == 'anonymous';
    }

    function isTeacher() {
      return isAuthenticated() && request.auth.token.firebase.sign_in_provider != 'anonymous';
    }

    function isAdmin() {
      return isTeacher() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    function isOwner(resource) {
      return request.auth.uid == resource.data.ownerId;
    }

    function isNewOwner() {
      return request.auth.uid == request.resource.data.ownerId;
    }

    function isAccountOwner() {
      return request.auth.uid == resource.data.uid;
    }
    
    function isNewAccountOwner() {
        return request.auth.uid == request.resource.data.uid;
    }
    
    //======================================================================
    //  Rules
    //  This section applies the helper functions to specific data paths.
    //======================================================================

    // Admins: Only authenticated teachers can check for admin status.
    match /admins/{userId} {
      allow read: if isTeacher();
      allow write: if false; // Should only be editable from the Firebase Console
    }
    
    // Users: Teachers can update their own user document.
    match /users/{userId} {
      allow read: if isTeacher();
      // Allow creating a user doc if it's for the person making the request.
      // Allow updating if it's the account owner or an admin.
      allow write: if (isNewAccountOwner() && isTeacher()) || (isAccountOwner() && isTeacher()) || isAdmin();
    }

    // Classrooms:
    // Students (anonymous users) can read a single classroom document to join.
    // Teachers can create, update, delete their own classrooms.
    // Admins can manage any classroom.
    match /classrooms/{classroomId} {
      // Allow anonymous users to GET a single classroom to see the student list.
      // Allow teachers to LIST their own classrooms. Admins can list all.
      allow read: if isAnonymous() || 
                     (isTeacher() && (isOwner(resource) || isAdmin())) ||
                     (isAuthenticated() && request.query.where.ownerId == request.auth.uid);
      allow create: if isTeacher() && isNewOwner();
      allow update, delete: if isTeacher() && (isOwner(resource) || isAdmin());

      // Submissions: Anonymous students must be able to submit answers.
      // Teachers need to be able to read all submissions for their class.
      match /submissions/{submissionId} {
        allow read: if isAuthenticated();
        // Allow creation if the submitted data has the required fields.
        allow create: if isAnonymous() && request.resource.data.keys().hasAll(['studentId', 'studentName', 'questionId', 'answer', 'timestamp']);
        allow update, delete: if isTeacher() && exists(/databases/$(database)/documents/classrooms/$(classroomId));
      }
      
      // Presence: Anonymous students must be able to write their presence status.
      // Teachers need to read presence data.
      match /presence/{studentId} {
        allow read: if isAuthenticated();
        allow write: if isAnonymous();
      }
    }

    // Courseware:
    // Teachers can manage their own courseware. Admins can manage any.
    match /courseware/{coursewareId} {
      allow get: if isTeacher() && (isOwner(resource) || isAdmin());
      allow list: if isAdmin() || (isTeacher() && request.query.where.ownerId == request.auth.uid);
      allow create: if isTeacher() && isNewOwner();
      allow update, delete: if isTeacher() && (isOwner(resource) || isAdmin());
    }
    
    // AI Usage Logs:
    // Teachers can create logs for their own usage.
    // Only Admins can read the logs.
    match /aiUsageLogs/{logId} {
        allow create: if isTeacher() && request.resource.data.userId == request.auth.uid;
        allow read, write, delete: if isAdmin();
    }
  }
}
