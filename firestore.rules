rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for admin status
    function isAdmin() {
      // Checks if a document for the current user exists in the 'admins' collection.
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Admins can read the full list of users for the admin panel.
      allow list: if isAdmin();
      
      // A user can get, create, or update their OWN document. Admins can do this for any user.
      allow get, write: if request.auth.uid == userId || isAdmin();
      
      // Only admins can delete user documents (part of the data deletion process).
      allow delete: if isAdmin();
    }
    
    // Rules for the 'admins' collection
    match /admins/{userId} {
      // Any authenticated user can attempt to read their own admin doc to check for admin status.
      allow get: if request.auth.uid != null;
      
      // Only admins can see the full list of other admins.
      allow list: if isAdmin();
      
      // Writing/deleting admins should only be done from the Firebase Console.
      allow write, delete: if false;
    }

    // Rules for 'classrooms' collection and its subcollections
    match /classrooms/{classroomId} {
      
      // This rule handles all read operations (get and list) for classrooms.
      // It correctly differentiates between students joining and teachers listing their classes.
      allow read: if 
        // Rule for GET: Allow any request. This is crucial for unauthenticated students 
        // who need to fetch classroom details when they join via a link.
        (request.method == 'get') ||
        // Rule for LIST: Allow if the user is an admin...
        isAdmin() || 
        // ...or if the user is authenticated and is the owner of the documents.
        // Firestore is smart enough to match the `where("ownerId", "==", uid)` clause 
        // in the client query against this `resource.data.ownerId == request.auth.uid` condition.
        (request.auth != null && resource.data.ownerId == request.auth.uid);

      // Allow classroom owners or admins to update and delete.
      allow update, delete: if (request.auth != null && resource.data.ownerId == request.auth.uid) || isAdmin();
      
      // Allow any authenticated user to create a classroom, as long as they set themselves as the owner.
      // This uses request.resource.data because the document doesn't exist yet before creation.
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;

      // Rules for 'submissions' subcollection
      match /submissions/{submissionId} {
        // Allow classroom owners or admins to read submissions.
        // Students should not be able to read each other's submissions.
        allow read: if (request.auth != null && get(/databases/$(database)/documents/classrooms/$(classroomId)).data.ownerId == request.auth.uid) || isAdmin();
        
        // Allow any authenticated user to create a submission.
        allow create: if request.auth != null;
        
        // Disallow updates and deletes on submissions from the client to preserve history.
        allow update, delete: if false;
      }
      
      // Rules for 'presence' subcollection
      match /presence/{studentId} {
        // Allow anyone to read presence data (for student list status).
        // Allow anyone to update presence data (for students to mark themselves online/offline).
        allow read, write: if true;
      }
    }
  }
}
