
rules_version = '2';

// In these rules, the `isAdmin()` function is the key to the security model.
// It checks if the UID of the user making the request exists as a document
// in the `/admins` collection. This is how we grant special privileges.

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for admin role
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Admins Collection:
    // Only an already authenticated user can check if they are an admin.
    // Writing to this collection should only be done from the server or Firebase Console,
    // so client-side writes are disallowed.
    match /admins/{userId} {
      allow read: if request.auth != null;
      allow write: if false; // Prevent clients from making themselves admins
    }

    // Users Collection:
    // - Any authenticated user can create/update their own user document.
    // - Only admins can read the full list of users or delete a user document.
    match /users/{userId} {
      allow get, write: if request.auth.uid == userId;
      allow list, delete: if isAdmin();
    }
    
    // Classrooms Collection:
    // - Teachers (owners) and admins have full control over classrooms.
    // - Any user (including unauthenticated students) can read a specific classroom to join.
    // - Students cannot list all classrooms.
    match /classrooms/{classroomId} {
      // READ:
      // - Admins can read anything.
      // - Owners can read their own classrooms.
      // - Anyone can `get` a single classroom document (needed for students to join).
      allow get: if true;
      allow list: if request.auth != null && (isAdmin() || request.query.where.field == "ownerId" && request.query.where.value == request.auth.uid);

      // WRITE:
      // - Admins and owners can create/delete classrooms.
      allow create, delete: if request.auth.uid == request.resource.data.ownerId || isAdmin();

      // UPDATE:
      // Teachers (owners) and admins can update any part of their classroom document.
      // Students have a very specific, limited permission to update ONLY the 'race' field
      // and ONLY when a race is currently 'pending'. This is the core of the secure race feature.
      function isStudentClaimingRace() {
        let isUpdatingRaceOnly = request.resource.data.diff(resource.data).affectedKeys().hasOnly(['race']);
        let isRacePending = resource.data.race.status == 'pending';
        let isFinishingRace = request.resource.data.race.status == 'finished';
        return isUpdatingRaceOnly && isRacePending && isFinishingRace;
      }
      
      allow update: if (request.auth.uid == resource.data.ownerId || isAdmin()) || isStudentClaimingRace();

      // Subcollections (presence and submissions)
      // Anyone can write to these, as students are not authenticated.
      // Reading is restricted to owners and admins for privacy.
      match /{subcollection}/{docId} {
         allow read: if request.auth.uid == get(/databases/$(database)/documents/classrooms/$(classroomId)).data.ownerId || isAdmin();
         allow write: if true;
      }
    }
  }
}
