rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(classroomId, userId) {
      return get(/databases/$(database)/documents/classrooms/$(classroomId)).data.ownerId == userId;
    }
    
    match /{document=**} {
      allow read, write: if false;
    }

    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
      allow read: if get(/databases/$(database)/documents/admins/$(request.auth.uid)).data != null;
    }
    
    match /admins/{userId} {
      allow get: if request.auth != null;
    }

    match /classrooms/{classroomId} {
      // Teachers can create, read, delete their own classrooms.
      allow read, delete: if request.auth != null && isOwner(classroomId, request.auth.uid);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerId;
      
      // Teachers can update their own classrooms.
      allow update: if request.auth != null && isOwner(classroomId, request.auth.uid);
      
      // Allow a race to be claimed by an unauthenticated server action.
      // This is secure because it only allows changing the 'race' field from a 'pending' to 'finished' state.
      allow update: if request.resource.data.diff(resource.data).affectedKeys().hasOnly(['race'])
                      && resource.data.race.status == 'pending'
                      && request.resource.data.race.status == 'finished';

      // Students can read the classroom to join.
      allow get: if true;
    }

    match /classrooms/{classroomId}/presence/{studentId} {
      allow write: if true;
      allow read: if true;
    }
    
    match /classrooms/{classroomId}/submissions/{submissionId} {
      allow create: if true; 
      allow read: if request.auth != null && isOwner(classroomId, request.auth.uid);
      allow delete: if request.auth != null && isOwner(classroomId, request.auth.uid);
    }
    
    match /courseware/{coursewareId} {
        allow read, write: if request.auth != null;
    }
  }
}
