
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    // Checks if the requesting user is the owner of an EXISTING document.
    // Use for get, update, delete.
    function isOwner(resource) {
      return isAuthenticated() && resource.data.ownerId == request.auth.uid;
    }

    // Checks if the requesting user is the owner of a NEW document.
    // Use for create.
    function isNewOwner() {
      return isAuthenticated() && request.resource.data.ownerId == request.auth.uid;
    }
    
    // Checks if the requesting user has a document in the 'admins' collection.
    function isAdmin() {
      return isAuthenticated() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Admins collection
    match /admins/{adminId} {
      // Allow any authenticated user to check for the existence of an admin doc.
      // This is required for the isAdmin() function to work for all users.
      // Do not allow listing the entire collection or writing to it.
      allow get: if isAuthenticated();
      allow list, write: if false;
    }

    // Classrooms collection
    match /classrooms/{classroomId} {
      // GET: Allow any authenticated user to get a single classroom (for joining).
      allow get: if isAuthenticated();
      
      // LIST: Admins can list all. Teachers can only list their own.
      // This requires the client query to include `where("ownerId", "==", request.auth.uid)`.
      allow list: if isAdmin() || (isAuthenticated() && request.query.where.ownerId == request.auth.uid);

      // CREATE: Only authenticated users can create classrooms for themselves.
      allow create: if isNewOwner();

      // UPDATE/DELETE: Only the owner or an admin can update or delete a classroom.
      allow update, delete: if isOwner(resource) || isAdmin();

      // Subcollections
      match /submissions/{submissionId} {
        // Allow authenticated users to create and read submissions.
        allow create, read: if isAuthenticated();
        // Disallow updating/deleting submissions from the client.
        allow update, delete: if false;
      }
      
      match /presence/{studentId} {
        // Allow authenticated users (including anonymous students) to manage presence.
        allow read, write: if isAuthenticated();
      }
    }

    // Courseware collection
    match /courseware/{coursewareId} {
      // GET: Owner or admin can get a specific courseware.
      allow get: if isOwner(resource) || isAdmin();

      // LIST: Admins can list all. Teachers can list their own.
      // This requires the client query to include `where("ownerId", "==", request.auth.uid)`.
      allow list: if isAdmin() || (isAuthenticated() && request.query.where.ownerId == request.auth.uid);

      // CREATE: Authenticated users can create courseware for themselves.
      allow create: if isNewOwner();

      // UPDATE/DELETE: Only the owner or an admin can modify.
      allow update, delete: if isOwner(resource) || isAdmin();
    }
    
    // AI Usage Logs
    match /aiUsageLogs/{logId} {
      // Any authenticated user can log their usage.
      allow create: if isAuthenticated();
      // Only admins can read the logs.
      allow read, list: if isAdmin();
      // Nobody can update/delete logs from the client.
      allow update, delete: if false;
    }
    
    // Users collection
    match /users/{userId} {
      // A user can get any other user's profile (e.g., for display name).
      allow get: if isAuthenticated();
      // A user can create or update their OWN user document.
      allow create, update: if request.auth.uid == userId;
      // Disallow listing all users or deleting from the client.
      allow list, delete: if false;
    }
  }
}
