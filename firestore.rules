rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAnonymous() {
      return isAuthenticated() && request.auth.token.firebase.sign_in_provider == 'anonymous';
    }

    function isTeacher() {
      return isAuthenticated() && !isAnonymous();
    }
    
    function isAdmin() {
      // Use existsAfter to prevent a read on every check.
      // This is safe from recursive loops because it checks the path, not the data.
      return existsAfter(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    function isOwner(resource) {
      return request.auth.uid == resource.data.ownerId;
    }
    
    match /admins/{adminId} {
      // Anyone can check their own admin status to allow login flow to work. Admins can check anyone.
      allow get: if request.auth.uid == adminId || isAdmin();
      allow list, write: if isAdmin();
    }

    match /users/{userId} {
      allow get, update: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId;
      allow list: if isAdmin();
    }

    match /aiUsageLogs/{logId} {
        allow read: if isAdmin();
        allow create: if isTeacher();
    }
    
    match /classrooms/{classroomId} {
      // GET: Owner, admin, or any student can get a single classroom doc. 
      // This is necessary for the "Join Class" page to work for students.
      allow get: if isOwner(resource) || isAdmin() || isAuthenticated();

      // LIST: Admins can list all. Teachers can only list their own.
      // This rule relies on the frontend query to enforce the ownerId check.
      allow list: if isAdmin() || (isTeacher() && request.query.get('ownerId') == request.auth.uid);
      
      // CREATE: Only teachers can create, and must set themselves as owner.
      allow create: if isTeacher() && request.resource.data.ownerId == request.auth.uid;
      
      // UPDATE: Owner or Admin can update.
      // EXCEPTION: A student can update *only* the `race` field if the race is 'pending' and they are the winner.
      allow update: if isOwner(resource) || isAdmin() || (
        isAuthenticated() &&
        resource.data.race.status == 'pending' &&
        request.resource.data.race.winnerId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['race'])
      );
      
      // DELETE: Owner or Admin.
      allow delete: if isOwner(resource) || isAdmin();
      
      match /submissions/{submissionId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update, delete: if false; // Preserve data integrity
      }
      
      match /presence/{studentId} {
        allow read, write: if isAuthenticated();
      }
    }
    
    // Courseware has the same ownership rules as classrooms
    match /courseware/{coursewareId} {
      allow get: if isOwner(resource) || isAdmin();
      allow list: if isAdmin() || (isTeacher() && request.query.get('ownerId') == request.auth.uid);
      allow create: if isTeacher() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isOwner(resource) || isAdmin();
    }
  }
}
