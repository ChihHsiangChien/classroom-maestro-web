rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }
    function isAnonymous() {
      return isAuthenticated() && request.auth.token.firebase.sign_in_provider == 'anonymous';
    }
    function isTeacher() {
      return isAuthenticated() && request.auth.token.firebase.sign_in_provider != 'anonymous';
    }
    function isAdmin() {
      // IMPORTANT: `exists()` calls do NOT trigger security rule evaluation on the path.
      // This avoids infinite loops. It's a metadata check, not a data read.
      return isAuthenticated() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    function isOwner(resource) {
      return isAuthenticated() && request.auth.uid == resource.data.ownerId;
    }

    // /admins/{adminId}
    // Admins manage the list of other admins.
    // Any authenticated user can check if THEY are an admin.
    match /admins/{adminId} {
      allow get: if request.auth.uid == adminId || isAdmin();
      allow list, write: if isAdmin();
    }

    // /users/{userId}
    // Users can update their own document. Admins can read any user doc.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId || isAdmin();
      allow create: if isTeacher() && request.resource.data.uid == request.auth.uid;
    }

    // /aiUsageLogs/{logId}
    // Only Teachers can create logs. Only Admins can read them.
    match /aiUsageLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isTeacher();
    }

    // /classrooms/{classroomId}
    // Core rules for classrooms and their subcollections.
    match /classrooms/{classroomId} {
      // GET: An anonymous student needs to 'get' a classroom to join it.
      // The owner or an admin can also 'get' it.
      allow get: if isOwner(resource) || isAdmin() || isAnonymous();
      // LIST: Admins can list all. Teachers can list ONLY their own.
      allow list: if isAdmin() || (isTeacher() && request.query.where.ownerId == request.auth.uid);
      // WRITE: Only teachers can create for themselves. Only owner/admin can update/delete.
      allow create: if isTeacher() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isOwner(resource) || isAdmin();

      // Submissions can be created by any authenticated user (student or teacher).
      match /submissions/{submissionId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        // No one can update/delete submissions from the client.
        allow update, delete: if false;
      }

      // Presence can be read/written by any authenticated user.
      match /presence/{studentId} {
        allow read, write: if isAuthenticated();
      }
    }

    // /courseware/{coursewareId}
    // Rules mirror classrooms for teacher-owned resources.
    match /courseware/{coursewareId} {
      allow get: if isOwner(resource) || isAdmin();
      allow list: if isAdmin() || (isTeacher() && request.query.where.ownerId == request.auth.uid);
      allow create: if isTeacher() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isOwner(resource) || isAdmin();
    }
  }
}
