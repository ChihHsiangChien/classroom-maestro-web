
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper Functions
    function isAnonymous() {
      return request.auth != null && request.auth.token.firebase.sign_in_provider == 'anonymous';
    }
    function isTeacher() {
      return request.auth != null && !isAnonymous();
    }
    function isAdmin() {
      return isTeacher() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    function isOwner(res) {
      return request.auth != null && res.data.ownerId == request.auth.uid;
    }
    function isNewOwner() {
      return request.auth != null && request.resource.data.ownerId == request.auth.uid;
    }
    function isAuthenticated() {
        return request.auth != null;
    }

    // Admins: Can read/write anything in the admins collection.
    match /admins/{adminId} {
      allow read, write: if isAdmin();
      allow get: if isAuthenticated(); // Allow any logged-in user to check if they are an admin
    }

    // Users: Can create their own user doc, and update their own lastActivity.
    match /users/{userId} {
      allow get: if request.auth.uid == userId || isAdmin();
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      allow list, delete: if isAdmin();
    }
    
    // AI Usage Logs: Teachers can create, Admins can read.
    match /aiUsageLogs/{logId} {
        allow create: if isTeacher();
        allow read, list, delete, update: if isAdmin();
    }

    // Classrooms: Teachers can manage their own, Admins can manage all.
    // Anonymous users can get a single classroom to join.
    match /classrooms/{classroomId} {
      allow get: if isAuthenticated();
      allow list: if isAdmin() || (isTeacher() && request.query.where.ownerId == request.auth.uid);
      allow create: if isTeacher() && isNewOwner();
      allow update, delete: if (isTeacher() && isOwner(resource)) || isAdmin();

      // Sub-collections
      match /submissions/{submissionId} {
        allow create: if isAuthenticated();
        allow read: if isAuthenticated();
        allow update, delete: if isAdmin();
      }
      match /presence/{studentId} {
        allow write: if isAuthenticated();
        allow read: if isAuthenticated();
      }
    }

    // Courseware: Teachers can manage their own, Admins can manage all.
    match /courseware/{coursewareId} {
      allow get: if (isTeacher() && isOwner(resource)) || isAdmin();
      allow list: if isAdmin() || (isTeacher() && request.query.where.ownerId == request.auth.uid);
      allow create: if isTeacher() && isNewOwner();
      allow update, delete: if (isTeacher() && isOwner(resource)) || isAdmin();
    }
  }
}
