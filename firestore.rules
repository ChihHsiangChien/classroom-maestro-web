
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function isAnonymous() {
      return isAuthenticated() && request.auth.token.firebase.sign_in_provider == 'anonymous';
    }

    function isTeacher() {
      return isAuthenticated() && !isAnonymous();
    }

    function isAdmin() {
      return isTeacher() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function isOwner(resource) {
      return request.auth.uid == resource.data.ownerId;
    }

    match /admins/{adminId} {
      allow get: if isTeacher() && request.auth.uid == adminId || isAdmin();
      allow list, write: if isAdmin();
    }

    match /users/{userId} {
      allow get, update, create: if isTeacher() && request.auth.uid == userId;
      allow list: if isAdmin();
    }

    match /aiUsageLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isTeacher();
    }

    match /classrooms/{classroomId} {
      allow get: if isOwner(resource) || isAdmin() || isAnonymous();
      allow list: if (isTeacher() && request.query.ownerId == request.auth.uid) || isAdmin();
      allow create: if isTeacher() && request.resource.data.ownerId == request.auth.uid;
      allow delete: if isOwner(resource) || isAdmin();

      // Rule for general updates by owner/admin
      allow update: if isOwner(resource) || isAdmin();

      // Specific rule to allow students to claim a race.
      // This is a narrow exception to the general update rule above,
      // creating a secure opening for the "Race" feature.
      allow update: if
        isAuthenticated() &&
        // The race must be currently pending to be claimed.
        resource.data.race.status == 'pending' &&
        // The student must be claiming it for themselves.
        request.resource.data.race.winnerId == request.auth.uid &&
        // The update must mark the race as finished.
        request.resource.data.race.status == 'finished' &&
        // CRITICAL: Ensure NO OTHER fields are changed except for 'race'.
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['race']);

      match /submissions/{submissionId} {
        allow read, create: if isAuthenticated();
        allow update, delete: if false;
      }

      match /presence/{studentId} {
        allow read, write: if isAuthenticated();
      }
    }

    match /courseware/{coursewareId} {
      allow get: if isOwner(resource) || isAdmin();
      allow list: if (isTeacher() && request.query.ownerId == request.auth.uid) || isAdmin();
      allow create: if isTeacher() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isOwner(resource) || isAdmin();
    }
  }
}
