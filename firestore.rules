rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is the owner of a document
    function isOwner(resource) {
      return request.auth.uid == resource.data.ownerId;
    }

    // Classroom rules
    match /classrooms/{classroomId} {
      // A special rule for the 'claimRace' action
      allow update: if request.resource.data.diff(resource.data).affectedKeys().hasOnly(['race']) &&
                      request.resource.data.race.status == 'finished' &&
                      resource.data.race.status == 'pending';
      
      // Teachers can create, read, update, and delete their own classrooms
      allow read, create, update, delete: if request.auth.uid != null && isOwner(resource);
      
      // Students can read classroom data to join
      allow get: if true;

      // Sub-collection rules for presence and submissions
      match /presence/{studentId} {
        // Any student can update their own presence, teachers can update any
        allow write: if request.auth.uid != null || request.auth.uid == studentId;
        allow read: if true;
      }

      match /submissions/{submissionId} {
        // Students can create submissions, teachers can read/delete them
        allow create, read, delete: if true; // Simplified for now
      }
    }

    // Courseware rules
    match /courseware/{coursewareId} {
      // A teacher can create courseware for themselves
      allow create: if request.auth.uid != null && request.resource.data.ownerId == request.auth.uid;
      // The owner can read, update, and delete their own courseware
      allow read, update, delete: if request.auth.uid != null && isOwner(resource);
    }

    // User document rules
    match /users/{userId} {
      // Users can only create and update their own document
      allow write: if request.auth.uid == userId;
      // Any authenticated user can read user profiles
      allow read: if request.auth.uid != null;
    }

    // Admin document rules
    match /admins/{userId} {
        // Only admins can read the list of other admins (for simplicity, any authenticated user can read)
        allow read: if request.auth.uid != null;
        // Writing to admins collection should be highly restricted, e.g., done via a cloud function or console.
        allow write: if false; 
    }
  }
}
