
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    // These functions make the rules easier to read and maintain.

    function isAuthenticated() {
      return request.auth != null;
    }

    // Checks if the user's UID is in the /admins collection.
    // This allows any authenticated user to check for existence, which is secure.
    function isAdmin() {
      return isAuthenticated() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // For creating new documents: Checks if the new document's ownerId matches the user's UID.
    function isNewOwner() {
      return isAuthenticated() && request.resource.data.ownerId == request.auth.uid;
    }

    // For existing documents: Checks if the document's current ownerId matches the user's UID.
    function isExistingOwner(resource) {
      return isAuthenticated() && resource.data.ownerId == request.auth.uid;
    }

    // --- Collection Rules ---

    // USERS: Basic user info.
    // - Anyone authenticated can see their own user doc.
    // - Only the user themselves can create or update their own doc.
    match /users/{userId} {
      allow read, update, create: if isAuthenticated() && request.auth.uid == userId;
      allow list: if isAdmin(); // Admins can list all users.
    }

    // ADMINS: A simple list of UIDs for users who have admin privileges.
    // - Only admins can read the list of other admins.
    match /admins/{adminId} {
      allow get: if isAuthenticated();
      allow list, write: if isAdmin();
    }
    
    // AI USAGE LOGS: For tracking AI feature usage.
    // - Only admins can read.
    // - Any authenticated user (teachers) can create a log entry.
    match /aiUsageLogs/{logId} {
        allow read: if isAdmin();
        allow create: if isAuthenticated();
    }

    // COURSEWARE: Teacher's lesson plans.
    // - Teachers can do anything with their own courseware.
    // - Admins can read all courseware for moderation/support.
    match /courseware/{coursewareId} {
      allow read: if isExistingOwner(resource) || isAdmin();
      allow create: if isNewOwner();
      allow update, delete: if isExistingOwner(resource);
    }

    // CLASSROOMS: The main container for a class, students, and activities.
    match /classrooms/{classroomId} {
      // READ: ANYONE can GET a single classroom document.
      // This is CRITICAL for students to join a class, see the student list,
      // and get updates on the active question or race status.
      allow get: if true;

      // LIST: Only the owner or an admin can list multiple classrooms (e.g., on the dashboard).
      allow list: if isExistingOwner(resource) || isAdmin();
      
      // WRITE: Only the owner can create, update, or delete their own classroom.
      allow create: if isNewOwner();
      allow update, delete: if isExistingOwner(resource);

      // --- SUBMISSIONS (Subcollection of Classrooms) ---
      match /submissions/{submissionId} {
        // READ: ANYONE can read submissions.
        // This is necessary for the student client to confirm their submission
        // and for the teacher's dashboard to display all results.
        allow read: if true;
        
        // CREATE: ANYONE can create a submission (submit an answer).
        // This is the core of the student workflow. We add validation
        // to ensure the submitted data has a valid structure.
        allow create: if request.resource.data.keys().hasAll([
          'studentId', 'studentName', 'questionId', 'questionText', 'questionType', 'answer', 'timestamp'
        ]) && request.resource.data.timestamp == request.time;
      }

      // --- PRESENCE (Subcollection of Classrooms) ---
      match /presence/{studentId} {
        // READ/WRITE: ANYONE can read and write to the presence collection.
        // This is necessary for the student's client to report they are online
        // and respond to attention pings from the teacher.
        allow read, write: if true;
      }
    }
  }
}
