
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /classrooms/{classroomId} {
      // Helper function to check if the requester is the owner of the classroom.
      function isOwner() {
        // resource.data refers to the document state *before* the request.
        return request.auth != null && request.auth.uid == resource.data.ownerId;
      }
      
      // Allow anyone to read the basic classroom data to join or see the activity.
      allow get: if true;

      // Only allow the owner to list their classrooms.
      // This rule is checked during a query and relies on the query filtering by ownerId.
      allow list: if request.auth != null && request.auth.uid == request.query.where.value;

      // Only the owner can create a classroom.
      // request.resource.data refers to the document state *after* the request.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerId;
      
      // The owner can delete their classroom.
      allow delete: if isOwner();

      // Update permissions are more complex.
      allow update: if 
        // Case 1: The owner can update anything.
        isOwner() || 
        // Case 2: A student can claim a race under very specific conditions.
        (
          // Ensure this is a race claim update by checking the status transition.
          request.resource.data.race.status == 'finished' && resource.data.race.status == 'pending' &&
          // Ensure they are not changing anything else on the classroom document.
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['race'])
        );
        
      // Subcollections
      match /submissions/{submissionId} {
        // Anyone can create a submission (students are not authenticated).
        allow create: if true;
        // Only the owner can read or manage submissions.
        allow read, update, delete: if isOwner();
      }
      
      match /presence/{studentId} {
        // Anyone can write to the presence subcollection to mark themselves online/offline.
        allow read, write: if true;
      }
    }
  }
}
