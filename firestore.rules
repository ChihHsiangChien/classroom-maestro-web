rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user is the owner of a document.
    // The `doc` parameter is the document's data.
    function isOwner(doc) {
      return request.auth != null && request.auth.uid == doc.ownerId;
    }

    match /classrooms/{classroomId} {
      // --- READ RULES ---
      // Anyone can GET a specific classroom document. This is needed for students to join.
      allow get;
      // Only the authenticated owner can LIST their own classrooms.
      allow list: if request.auth != null && request.query.where.ownerId == request.auth.uid;

      // --- WRITE RULES ---
      // CREATE: The requesting user must be the owner of the document they are creating.
      allow create: if isOwner(request.resource.data);

      // DELETE: The requesting user must be the owner of the document they are deleting.
      allow delete: if isOwner(resource.data);

      // UPDATE: Allow updates under two distinct conditions (Teacher or Student).
      allow update: if
        // Condition 1 (Teacher): Allow any update if the user is the owner.
        // This covers starting/ending questions, resetting races, locking the room, etc.
        isOwner(resource.data)
        ||
        // Condition 2 (Student): Allow an unauthenticated user to ONLY claim a pending race.
        ( request.auth == null &&
          request.resource.data.race.status == 'finished' &&
          resource.data.race.status == 'pending' &&
          // This ensures no other top-level fields are being maliciously added or changed.
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['race'])
        );

      // --- SUBCOLLECTION RULES ---
      match /presence/{studentId} {
        // Anyone can write to their own presence document.
        allow read, write;
      }

      match /submissions/{submissionId} {
        // Anyone can create (submit) a submission.
        allow create;
        // Only the owner of the classroom can read or delete submissions.
        allow read, list, delete: if isOwner(get(/databases/$(database)/documents/classrooms/$(classroomId)).data);
      }
    }
  }
}
