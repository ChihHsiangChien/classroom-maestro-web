
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requester is the owner of the classroom.
    function isOwner(classroomId) {
      return get(/databases/$(database)/documents/classrooms/$(classroomId)).data.ownerId == request.auth.uid;
    }

    // Rules for the 'classrooms' collection
    match /classrooms/{classroomId} {

      // --- READ Operations ---
      
      // Allow anyone to GET a specific classroom document.
      // This is necessary for students to join a class using a link/ID.
      allow get;
      
      // Allow an authenticated user to LIST classrooms.
      // Security is enforced by the client-side query, which MUST include:
      // where("ownerId", "==", user.uid)
      allow list: if request.auth != null;

      // --- WRITE Operations ---

      // Allow authenticated users to CREATE a classroom if they set themselves as the owner.
      allow create: if request.auth.uid == request.resource.data.ownerId;
      
      // Allow the owner to DELETE their classroom.
      allow delete: if isOwner(classroomId);

      // --- UPDATE Operations ---
      // This is the most complex rule. It must allow two distinct actors to update the document.
      
      // Helper function for a student claiming a race victory.
      function isStudentClaimingRace(request, resource) {
        let before = resource.data;
        let after = request.resource.data;
        // The request must not be from an authenticated teacher
        return request.auth == null
               // The race object must exist and must have been 'pending'
               && before.race != null && before.race.status == 'pending'
               // The after-state must have the race object and it must be 'finished'
               && after.race != null && after.race.status == 'finished'
               // The student must provide a winnerId and winnerName
               && after.race.winnerId != null && after.race.winnerName != null
               // IMPORTANT: Ensure no other fields were changed besides the 'race' field.
               && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['race']);
      }

      // Allow UPDATE if the user is the owner OR if it's a valid student race claim.
      allow update: if isOwner(classroomId) || isStudentClaimingRace(request, resource);

      // --- Subcollections ---

      // Any authenticated user (i.e., the teacher) can manage their own submissions.
      // Students need to be able to create submissions.
      match /submissions/{submissionId} {
        // Teacher can do anything.
        allow read, write: if isOwner(classroomId);
        // Student can create a submission.
        allow create; 
      }
      
      // Allow anyone to update their presence (students joining) or the owner to manage presence.
      match /presence/{studentId} {
         allow read, write: if request.auth == null || isOwner(classroomId);
      }
    }
  }
}
