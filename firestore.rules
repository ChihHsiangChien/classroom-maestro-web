
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user is an admin.
    // It checks for the user's UID in the 'admins' collection.
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Helper function to check if the update is a valid "race claim" by a student.
    function isRaceClaim() {
      // Ensure the user is not authenticated (i.e., is a student).
      return request.auth == null &&
        // Ensure that ONLY the 'race' field is being modified.
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['race']) &&
        // Ensure the race was 'pending' before this update.
        resource.data.race.status == 'pending' &&
        // Ensure the race is being set to 'finished' now.
        request.resource.data.race.status == 'finished' &&
        // Ensure a winner is being declared.
        request.resource.data.race.winnerId != null;
    }

    // Rules for the 'users' collection, which stores teacher account info.
    match /users/{userId} {
      // Admins can read the full list for the admin panel.
      // Individual users can only read/write their own document.
      allow read: if isAdmin() || request.auth.uid == userId;
      allow write: if request.auth.uid == userId;
    }

    // Rules for the 'admins' collection.
    match /admins/{userId} {
      // Only existing admins can read/write to the admins collection.
      // This prevents users from making themselves admins.
      allow read, write: if isAdmin();
    }

    // Rules for the main 'classrooms' collection.
    match /classrooms/{classroomId} {
      // READ:
      // ANYONE can get a single classroom document (needed for students to join).
      // ONLY the owner or an admin can list/query multiple classrooms.
      allow get: if true;
      allow list: if request.auth.uid == resource.data.ownerId || isAdmin();
      
      // WRITE:
      // A classroom can be updated by its owner/admin OR by a student claiming a race.
      allow update: if (request.auth.uid == resource.data.ownerId || isAdmin()) || isRaceClaim();

      // Only authenticated users can create classrooms, and they must be the owner.
      allow create: if request.auth.uid == request.resource.data.ownerId;
      
      // Only the owner or an admin can delete a classroom.
      allow delete: if request.auth.uid == resource.data.ownerId || isAdmin();

      // --- SUBCOLLECTION RULES ---

      // Rules for the 'submissions' subcollection for answers.
      match /submissions/{submissionId} {
        // ANYONE can create a submission (students are not authenticated).
        allow create: if true;
        
        // Reading/updating/deleting submissions is restricted to the classroom owner/admin.
        allow read, update, delete: if request.auth.uid == get(/databases/$(database)/documents/classrooms/$(classroomId)).data.ownerId || isAdmin();
      }

      // Rules for the 'presence' subcollection for online status.
      match /presence/{studentId} {
        // ANYONE can read/write to the presence subcollection for real-time status.
        allow read, write: if true;
      }
    }
  }
}
