
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAnonymous() {
      return isAuthenticated() && request.auth.token.firebase.sign_in_provider == 'anonymous';
    }

    function isTeacher() {
      return isAuthenticated() && !isAnonymous();
    }
    
    function isAdmin() {
      // This check does not incur a read operation.
      return isTeacher() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function isOwner(resource) {
      return request.auth.uid == resource.data.ownerId;
    }
    
    match /admins/{adminId} {
      // Any authenticated user can check for their own admin doc. Admins can check anyone.
      allow get: if request.auth.uid == adminId || isAdmin();
      allow list, write: if isAdmin();
    }
    
    match /users/{userId} {
        // A user can only read or update their own user document.
        allow get, update: if request.auth.uid == userId;
        // Any teacher can create their own initial user document upon first login.
        allow create: if isTeacher() && request.auth.uid == userId;
        allow list: if isAdmin();
    }

    match /aiUsageLogs/{logId} {
        allow read: if isAdmin();
        allow create: if isTeacher();
    }
    
    match /classrooms/{classroomId} {
        // GET: An owner, admin, or any student can get a single classroom document.
        // Students need this for the join page to function.
        allow get: if isOwner(resource) || isAdmin() || isAnonymous();

        // LIST: Any teacher can perform list queries.
        // Security is enforced by the frontend query (filtering by ownerId) 
        // and the 'get' rule above which secures each document.
        allow list: if isTeacher();

        allow create: if isTeacher() && request.resource.data.ownerId == request.auth.uid;
        allow update: if (isOwner(resource) || isAdmin()) 
                    // Exception for the "Race" feature, allowing any authenticated user
                    // to claim a pending race for themselves, and only modify the 'race' field.
                    || (isAuthenticated() 
                        && resource.data.race.status == 'pending'
                        && request.resource.data.race.winnerId == request.auth.uid
                        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['race']));
        allow delete: if isOwner(resource) || isAdmin();
        
        match /submissions/{submissionId} {
            allow read, create: if isAuthenticated();
            allow update, delete: if false;
        }

        match /presence/{studentId} {
            allow read, write: if isAuthenticated();
        }
    }
    
    match /courseware/{coursewareId} {
        // GET: An owner or admin can get a single courseware document.
        allow get: if isOwner(resource) || isAdmin();

        // LIST: Any teacher can perform list queries, trusting the frontend query.
        allow list: if isTeacher();

        allow create: if isTeacher() && request.resource.data.ownerId == request.auth.uid;
        allow update, delete: if isOwner(resource) || isAdmin();
    }
  }
}
