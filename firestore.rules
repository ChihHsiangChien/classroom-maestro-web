
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAnonymous() {
      return isAuthenticated() && request.auth.token.firebase.sign_in_provider == 'anonymous';
    }

    function isTeacher() {
      return isAuthenticated() && !isAnonymous();
    }

    function isAdmin() {
      // Check if the requesting user's UID exists in the /admins collection.
      return isTeacher() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Checks if the requesting user is the owner of an EXISTING resource.
    function isOwner(resource) {
      return request.auth.uid == resource.data.ownerId;
    }
    
    // Checks if the requesting user is the owner of a NEW resource being created.
    function isNewOwner() {
      return request.auth.uid == request.resource.data.ownerId;
    }

    // --- Collection Rules ---

    // Admins collection: only other admins can read it.
    match /admins/{adminId} {
      allow read, write: if isAdmin();
    }
    
    // Users collection: for storing teacher public profiles
    match /users/{userId} {
       allow get: if isAuthenticated();
       allow list: if isAdmin();
       allow create: if request.auth.uid == userId;
       allow update: if (request.auth.uid == userId && request.resource.data.keys().hasOnly(['lastActivity', 'displayName', 'email', 'uid'])) || isAdmin();
       allow delete: if isAdmin();
    }

    // AI Usage Logs: teachers can write, only admins can read.
    match /aiUsageLogs/{logId} {
        allow create: if isTeacher();
        allow read: if isAdmin();
        allow update, delete: if false;
    }

    // Classrooms Collection
    match /classrooms/{classroomId} {
      // GET: Who can read a SINGLE classroom document?
      // - An anonymous user can read it to join the class (sees student list).
      // - A teacher can read their own class.
      // - An admin can read any class.
      allow get: if isAnonymous() || isAdmin() || (isTeacher() && isOwner(resource));

      // LIST: Who can query the classrooms collection?
      // The query is then secured by the 'get' rule on each resulting document.
      allow list: if isTeacher() || isAdmin();

      // WRITE: Who can create, update, or delete classrooms?
      allow create: if isTeacher() && isNewOwner();
      allow update: if isTeacher() && (isOwner(resource) || isAdmin());
      allow delete: if isTeacher() && (isOwner(resource) || isAdmin());

      // Sub-collections
      match /submissions/{submissionId} {
        allow create: if isAuthenticated();
        allow read: if isAuthenticated();
        allow update, delete: if false;
      }
      
      match /presence/{studentId} {
          allow write: if isAuthenticated();
          allow read: if isAuthenticated();
      }
    }
    
    // Courseware Collection
    match /courseware/{coursewareId} {
      // GET: Who can read a SINGLE courseware document?
      allow get: if isAdmin() || (isTeacher() && isOwner(resource));

      // LIST: Who can query the courseware collection?
      allow list: if isTeacher() || isAdmin();
      
      // WRITE: Who can create, update, or delete courseware?
      allow create: if isTeacher() && isNewOwner();
      allow update, delete: if isTeacher() && (isOwner(resource) || isAdmin());
    }
  }
}
