
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isOwner(resourceId) {
      // Use this for /users/{userId} where the document ID is the user's UID.
      return request.auth != null && request.auth.uid == resourceId;
    }

    function isResourceOwner(resource) {
      // Use this for documents that have an 'ownerId' field.
      return request.auth != null && resource.data.ownerId == request.auth.uid;
    }
    
    function isAdmin() {
      // Check if the requesting user's UID exists in the 'admins' collection.
      return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // --- Safe Read Helper ---
    // Safely checks if a user is the owner of a document, without causing errors for anonymous users.
    function isOwnerOf(docPath) {
      let doc = get(docPath);
      return request.auth != null && doc.data.ownerId == request.auth.uid;
    }
    
    // --- Collection Rules ---

    // Admins collection: only other admins can read. No one can write directly.
    match /admins/{adminId} {
      allow read: if isAdmin();
      allow write: if false; // Managed via Firebase Console
    }
    
    // Users collection: a user can read/write their own document. Admins can read all.
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow list: if isAdmin();
    }
    
    match /classrooms/{classroomId} {
      // Anyone can read the basic classroom info to join or view the question.
      allow get: if true;
      // Only authenticated users can list all classrooms (for the dashboard).
      allow list: if request.auth != null;
      
      // An authenticated user can create a classroom.
      allow create: if request.auth != null;
      // Only the teacher who owns the classroom or an admin can update/delete it.
      allow update, delete: if isResourceOwner(resource) || isAdmin();

      // Presence: Anyone can read or write to the presence subcollection.
      // This allows students (anonymous) to update their online status.
      match /presence/{path=**} {
        allow read, write: if true;
      }
      
      // Submissions:
      match /submissions/{submissionId} {
        // Anyone can create a submission (students submitting answers).
        allow create: if true;
        // Anyone can read submissions. This is necessary for the student client
        // to confirm their submission was received.
        allow read: if true;
        // Only the teacher of the parent classroom or an admin can delete submissions.
        allow delete: if isOwnerOf(/databases/$(database)/documents/classrooms/$(classroomId)) || isAdmin();
      }
    }
    
    // Courseware: Only owners or admins can manage.
    match /courseware/{coursewareId} {
      // Any authenticated user (teacher) can read or create courseware.
      allow read, create: if request.auth != null;
      // Only the owner or an admin can modify courseware.
      allow update, delete: if isResourceOwner(resource) || isAdmin();
    }

    // AI Usage Logs: Only Admins can read. No one can write directly from client.
    match /aiUsageLogs/{logId} {
      allow read: if isAdmin();
      allow write: if false; // Should be written by a trusted server environment
    }
  }
}
