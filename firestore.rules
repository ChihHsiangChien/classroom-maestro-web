
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is the owner of a classroom.
    // This is used in multiple rules below for consistency.
    function isOwner(classroomId) {
      return get(/databases/$(database)/documents/classrooms/$(classroomId)).data.ownerId == request.auth.uid;
    }

    match /classrooms/{classroomId} {
      // --- READ RULES ---

      // LIST: A teacher can list ONLY the classrooms they own.
      // This rule requires the client query to include: where("ownerId", "==", request.auth.uid)
      allow list: if request.auth != null && request.query.where.ownerId == request.auth.uid;
      
      // GET: Anyone can get a specific classroom document if they have the ID.
      // This is required for students to join a class.
      allow get: if true;

      // --- WRITE RULES ---

      // CREATE: An authenticated user can create a classroom if they set themselves as the owner.
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;

      // UPDATE: The owner can update anything, OR a student can claim a pending race.
      allow update: if 
          // Case 1: Teacher (owner) is updating their own classroom.
          (request.auth != null && isOwner(classroomId)) ||
          // Case 2: Student (unauthenticated) is claiming a pending race.
          (request.auth == null && 
           resource.data.race.status == 'pending' &&
           request.resource.data.race.status == 'finished' &&
           // Security check: ensure student is ONLY modifying the 'race' field.
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['race']));

      // DELETE: Only the owner can delete their classroom.
      allow delete: if request.auth != null && isOwner(classroomId);

      // --- SUBCOLLECTIONS ---
      match /presence/{studentId} {
        // Anyone can read presence data to see who is online.
        allow read: if true;
        // Unauthenticated students can update presence. A simplification for this app's auth model.
        allow write: if request.auth == null;
      }
      
      match /submissions/{submissionId} {
        // Only the classroom owner can read submissions.
        allow read: if isOwner(classroomId);
        // Unauthenticated students can create submissions.
        allow create: if request.auth == null;
      }
    }
    
    // User profile and admin status collections
    match /users/{userId} {
      // Anyone can read user profiles (e.g., display names).
      allow read: if true;
      // A user can only write to their own profile document.
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    match /admins/{userId} {
      // Anyone can check for the existence of an admin document.
      allow read: if true;
    }
  }
}
