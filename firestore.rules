rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isOwner(resource) {
      return request.auth.uid == resource.data.ownerId;
    }
    
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function isRaceClaim(request, resource) {
      let isAnonymous = request.auth == null;
      let incomingData = request.resource.data;
      let existingData = resource.data;
      
      // Ensure only the race field is being modified
      let onlyRaceModified = incomingData.diff(existingData).affectedKeys().hasOnly(['race']);
      
      // Ensure the status is changing from pending to finished
      let statusChangeValid = existingData.race.status == 'pending' && incomingData.race.status == 'finished';
      
      // Ensure a winner is being set
      let winnerSet = incomingData.race.winnerId != null && incomingData.race.winnerName != null;
      
      return isAnonymous && onlyRaceModified && statusChangeValid && winnerSet;
    }

    // Courseware: Teachers can manage their own courseware packages.
    match /courseware/{packageId} {
      allow read, delete: if isOwner(resource) || isAdmin();
      allow create: if isOwner(request.resource) || isAdmin();
      allow update: if isOwner(resource) || isAdmin();
    }

    match /users/{userId} {
      allow read;
      allow write: if request.auth.uid == userId || isAdmin();
    }

    match /admins/{adminId} {
        allow read: if request.auth != null;
    }

    match /classrooms/{classroomId} {
      // Anyone can GET a single classroom doc to join, but only owners/admins can LIST them.
      allow read: if request.method == 'get' || isOwner(resource) || isAdmin();
      
      // Only owners/admins can create or delete classrooms.
      allow create: if isOwner(request.resource) || isAdmin();
      allow delete: if isOwner(resource) || isAdmin();

      // Owners/admins can update, OR an anonymous user can claim a race.
      allow update: if isOwner(resource) || isAdmin() || isRaceClaim(request, resource);

      match /submissions/{submissionId} {
        // Students can create submissions, only owners/admins can read/delete them.
        allow create: if true;
        allow read, delete: if isOwner(get(/databases/$(database)/documents/classrooms/$(classroomId))) || isAdmin();
        allow update: if false;
      }
      
      match /presence/{studentId} {
        // Anyone can update presence (students joining/leaving)
        allow write: if true;
        allow read: if true;
      }
    }
  }
}
