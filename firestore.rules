
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =============================================
    // Helper Functions
    // =============================================
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAnonymous() {
      return isAuthenticated() && request.auth.token.firebase.sign_in_provider == 'anonymous';
    }

    function isTeacher() {
      return isAuthenticated() && !isAnonymous();
    }

    function isAdmin() {
      // Check if the user's UID exists in the /admins collection.
      // This check does not incur a read and is safe from recursive loops.
      return isTeacher() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function isOwner(res) {
      // Check if the requesting user's UID matches the ownerId of the document.
      return isTeacher() && request.auth.uid == res.data.ownerId;
    }

    // =============================================
    // Collection-Specific Rules
    // =============================================

    // --- Admin & User Profile Rules ---
    match /admins/{adminId} {
      // Allow any user to check their own admin status. Admins can read anyone's.
      allow get: if request.auth.uid == adminId || isAdmin();
      // Only Admins can list, create, or delete other admins.
      allow list, write: if isAdmin();
    }

    match /users/{userId} {
      // A user can only read or update their own document. Admins can read any.
      allow get: if request.auth.uid == userId || isAdmin();
      allow update: if request.auth.uid == userId;
      // Any authenticated teacher can create their own user document on first sign-in.
      allow create: if isTeacher() && request.auth.uid == userId;
    }
    
    match /aiUsageLogs/{logId} {
      allow read: if isAdmin();
      // Only teachers can create usage logs.
      allow create: if isTeacher();
    }

    // --- Classroom Rules ---
    match /classrooms/{classroomId} {
      // Read Permissions:
      // get: Reading a single document.
      // list: Querying a collection.
      allow get: if isAnonymous() || isOwner(resource) || isAdmin();
      allow list: if isTeacher() || isAdmin();

      // Write Permissions:
      allow create: if isTeacher() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isOwner(resource) || isAdmin();

      // --- Subcollections ---
      match /submissions/{submissionId} {
        // Any authenticated user can read submissions (for dashboard/results).
        // Any authenticated user can create a submission (students answering).
        allow read, create: if isAuthenticated();
        // Submissions are immutable from the client-side.
        allow update, delete: if false;
      }

      match /presence/{studentId} {
         // Any authenticated user can update presence status.
         allow read, write: if isAuthenticated();
      }
    }

    // --- Courseware Rules ---
    match /courseware/{coursewareId} {
      // Same logic as classrooms, but anonymous users have no access.
      allow get: if isOwner(resource) || isAdmin();
      allow list: if isTeacher() || isAdmin();
      allow create: if isTeacher() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isOwner(resource) || isAdmin();
    }
  }
}
