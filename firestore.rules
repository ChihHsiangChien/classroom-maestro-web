rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =============================================
    //           Helper Functions
    // =============================================
    function isAuthenticated() {
      // Returns true if the user is signed in (either teacher or anonymous student).
      return request.auth != null;
    }

    function isTeacher() {
      // Returns true if the user is a logged-in teacher (not anonymous).
      return isAuthenticated() && request.auth.token.firebase.sign_in_provider != 'anonymous';
    }

    function isAdmin() {
      // Returns true if the user is a teacher and their UID is in the admins collection.
      return isTeacher() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function isOwner(resource) {
      // Checks if the user is the owner of an existing resource.
      return request.auth.uid == resource.data.ownerId;
    }

    function isNewOwner() {
      // Checks if the user is the owner of a new resource being created.
      return request.auth.uid == request.resource.data.ownerId;
    }

    // =============================================
    //            Collection Rules
    // =============================================

    match /admins/{userId} {
      // Any teacher can check if a UID is an admin (needed for the isAdmin() function to work).
      allow get: if isTeacher();
      // Only other admins can manage the admin list.
      allow list, write: if isAdmin();
    }

    match /users/{userId} {
      // A user can get their own document, or an admin can get any.
      allow get: if request.auth.uid == userId || isAdmin();
      // Only admins can see the full list of users.
      allow list: if isAdmin();
      // A user can create their own document upon first login.
      allow create: if request.auth.uid == userId;
      // A user can update their own document (e.g., for lastActivity).
      allow update: if request.auth.uid == userId;
    }

    match /aiUsageLogs/{logId} {
      // Teachers can log their AI usage.
      allow create: if isTeacher();
      // Only admins can view the logs.
      allow read, list: if isAdmin();
    }

    // --- Classrooms & Sub-collections ---
    match /classrooms/{classroomId} {
      // READ: Any authenticated user (including anonymous students) can GET a specific classroom to join.
      // Teachers can LIST their own classrooms, admins can LIST all.
      allow get: if isAuthenticated();
      allow list: if isAdmin() || (isTeacher() && request.query.where.ownerId == request.auth.uid);

      // WRITE: Only teachers can create classrooms for themselves.
      // Only the owner teacher or an admin can update/delete.
      allow create: if isTeacher() && isNewOwner();
      allow update, delete: if isTeacher() && (isOwner(resource) || isAdmin());

      // SUBMISSIONS: Students need to create and read submissions.
      match /submissions/{submissionId} {
        allow read, create: if isAuthenticated();
        // Only teachers/admins can manage submissions after they are created.
        allow list, update, delete: if isTeacher() || isAdmin();
      }
      
      // PRESENCE: Students and teachers need to read/write presence info.
      match /presence/{studentId} {
        allow read, write: if isAuthenticated();
      }
    }

    // --- Courseware ---
    match /courseware/{coursewareId} {
      // READ: The owner teacher or an admin can get a single courseware.
      // Teachers can LIST their own courseware, admins can LIST all.
      allow get: if isTeacher() && (isOwner(resource) || isAdmin());
      allow list: if isAdmin() || (isTeacher() && request.query.where.ownerId == request.auth.uid);
      
      // WRITE: Only teachers can create courseware for themselves.
      // Only the owner teacher or an admin can update/delete.
      allow create: if isTeacher() && isNewOwner();
      allow update, delete: if isTeacher() && (isOwner(resource) || isAdmin());
    }
  }
}
